{"version":3,"sources":["../../../projects/kvm/src/environments/environment.ts","../../../projects/kvm/src/lib/kvm.service.ts","../../../projects/kvm/src/lib/kvm.component.ts","../../../projects/kvm/src/lib/kvm.component.html","../../../projects/kvm/src/lib/app/device-toolbar/device-toolbar.component.ts","../../../projects/kvm/src/lib/app/device-toolbar/device-toolbar.component.html","../../../projects/kvm/src/lib/kvm.module.ts"],"names":["environment","production","mpsServer","rpsServer","KvmService","http","this","connectKVMSocket","EventEmitter","stopwebSocket","prototype","setAmtFeatures","deviceId","post","userConsent","enableKVM","enableSOL","enableIDER","pipe","catchError","err","getPowerState","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn","Injectable","KvmComponent","devicesService","_this","width","height","deviceState","deviceStatus","powerState","btnText","isPoweredOn","isLoading","selected","server","replace","previousAction","selectedAction","mouseMove","encodings","value","viewValue","onConnectionStateChange","redirector","state","emit","reset","module","dataProcessor","instantiate","stopKvm","stop","keyboardHelper","UnGrabKeyInput","includes","ngOnInit","logger","ConsoleLogger","stopSocketSubscription","subscribe","startSocketSubscription","timeInterval","interval","mergeMap","ngAfterViewInit","context","_a","canvas","nativeElement","getContext","AMTKvmDataRedirector","Protocol","KVM","FileReader","AMTDesktop","DataProcessor","mouseHelper","MouseHelper","KeyBoardHelper","onProcessData","processData","bind","onStart","start","onNewState","onStateChange","onSendKvmData","onStateChanged","onError","onRedirectorError","onSend","send","bpp","fromEvent","_b","throttleTime","event","mousemove","init","of","finalize","data","checkPowerStatus","setTimeout","autoConnect","console","log","WebSocket","GrabKeyInput","powerstate","ngDoCheck","onMouseup","mouseup","onMousedown","mousedown","ɵɵdirectiveInject","selectors","viewQuery","rf","ctx","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵlistener","$event","i0.ɵɵadvance","i0.ɵɵproperty","Component","selector","templateUrl","styles","ViewChild","static","Input","Output","DeviceToolbarComponent","decls","vars","template","styleUrls","KvmModule","imports","HttpClientModule","BrowserModule","declarations","exports","NgModule","schemas","CUSTOM_ELEMENTS_SCHEMA","providers"],"mappings":"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","sourcesContent":["export const environment = {\r\n    production: false,\r\n    mpsServer: 'https://localhost/mps',\r\n    rpsServer: 'https://localhost/rps' \r\n}","import { HttpClient } from '@angular/common/http';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs'\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\nimport { AmtFeaturesResponse, PowerState } from '../models/models';\n\n@Injectable({\n  providedIn: 'platform'\n})\n\nexport class KvmService {\n\n  connectKVMSocket: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n  stopwebSocket: EventEmitter<boolean> = new EventEmitter<boolean>(false)\n  \n  constructor(private readonly http: HttpClient) { }\n\n  setAmtFeatures (deviceId: string): Observable<AmtFeaturesResponse> {\n    const payload = { userConsent: 'none', enableKVM: true, enableSOL: true, enableIDER: true }\n    return this.http.post<AmtFeaturesResponse>(`${environment.mpsServer}/api/v1/amt/features/${deviceId}`, payload)\n      .pipe(\n        catchError((err) => {\n          throw err\n        })\n      )\n  }\n  getPowerState (deviceId: string): Observable<PowerState> {\n    return this.http.get<PowerState>(`${environment.mpsServer}/api/v1/amt/power/state/${deviceId}`)\n      .pipe(\n        catchError((err) => {\n          throw err\n        })\n      )\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport {\n  AMTDesktop,\n  AMTKvmDataRedirector,\n  ConsoleLogger,\n  DataProcessor,\n  IDataProcessor,\n  ILogger,\n  KeyBoardHelper,\n  MouseHelper,\n  Protocol,\n} from '@open-amt-cloud-toolkit/ui-toolkit/core';\nimport { environment } from '../environments/environment';\n// import { ActivatedRoute } from '@angular/router';\nimport { KvmService } from './kvm.service';\nimport { fromEvent, interval, of, Subscription, timer } from 'rxjs';\nimport { catchError, finalize, mergeMap, throttleTime } from 'rxjs/operators';\n// import { AuthService } from './auth.service'\n\n@Component({\n  selector: 'amt-kvm',\n  templateUrl: './kvm.component.html',\n  styles: [],\n})\nexport class KvmComponent implements OnInit, AfterViewInit {\n  @ViewChild('canvas', { static: false }) canvas: ElementRef | undefined;\n  public context!: CanvasRenderingContext2D;\n\n  // //setting a width and height for the canvas\n\n  @Input() public width = 400;\n  @Input() public height = 400;\n  @Output() deviceState: number = 0;\n  @Output() deviceStatus: EventEmitter<number> = new EventEmitter<number>();\n  stopSocketSubscription!: Subscription;\n  startSocketSubscription!: Subscription;\n  module: any;\n  redirector: any;\n  dataProcessor!: IDataProcessor | null;\n  mouseHelper!: MouseHelper;\n  keyboardHelper!: KeyBoardHelper;\n  logger!: ILogger;\n  powerState: any = 0;\n  btnText: string = 'Disconnect';\n  isPoweredOn: boolean = false;\n  isLoading: boolean = false;\n  deviceId: string = '';\n  selected: number = 1;\n  timeInterval!: any;\n  server: string = `${environment.mpsServer.replace('http', 'ws')}/relay`;\n  previousAction = 'kvm';\n  selectedAction = '';\n  mouseMove: any = null;\n\n  encodings = [\n    { value: 1, viewValue: 'RLE 8' },\n    { value: 2, viewValue: 'RLE 16' },\n  ];\n\n  constructor(\n    private readonly devicesService: KvmService,\n    // public readonly activatedRoute: ActivatedRoute\n  ) {\n    if (environment.mpsServer.includes('/mps')) {\n      //handles kong route\n      this.server = `${environment.mpsServer.replace('http', 'ws')}/ws/relay`;\n    }\n  }\n\n  ngOnInit(): void {\n    this.logger = new ConsoleLogger(1);\n    // this.activatedRoute.params.subscribe((params) => {\n    //   this.isLoading = true;\n    //   this.deviceId = params.id;\n    // });\n    this.stopSocketSubscription = this.devicesService.stopwebSocket.subscribe(\n      () => {\n        this.stopKvm();\n      }\n    );\n    this.startSocketSubscription =\n      this.devicesService.connectKVMSocket.subscribe(() => {\n        this.setAmtFeatures();\n      });\n    this.timeInterval = interval(15000)\n      .pipe(mergeMap(() => this.devicesService.getPowerState(this.deviceId)))\n      .subscribe();\n  }\n\n  ngAfterViewInit(): void {\n    this.setAmtFeatures();\n  }\n\n  instantiate(): void {\n    this.context = this.canvas?.nativeElement.getContext('2d');\n    this.redirector = new AMTKvmDataRedirector(\n      this.logger,\n      Protocol.KVM,\n      new FileReader(),\n      this.deviceId,\n      16994,\n      '',\n      '',\n      0,\n      0,\n      // this.authService.getLoggedUserToken(),\n      this.server\n    );\n    this.module = new AMTDesktop(this.logger as any, this.context);\n    this.dataProcessor = new DataProcessor(\n      this.logger,\n      this.redirector,\n      this.module\n    );\n    this.mouseHelper = new MouseHelper(this.module, this.redirector, 200);\n    this.keyboardHelper = new KeyBoardHelper(this.module, this.redirector);\n\n    this.redirector.onProcessData = this.module.processData.bind(this.module);\n    this.redirector.onStart = this.module.start.bind(this.module);\n    this.redirector.onNewState = this.module.onStateChange.bind(this.module);\n    this.redirector.onSendKvmData = this.module.onSendKvmData.bind(this.module);\n    this.redirector.onStateChanged = this.onConnectionStateChange.bind(this);\n    this.redirector.onError = this.onRedirectorError.bind(this);\n    this.module.onSend = this.redirector.send.bind(this.redirector);\n    this.module.onProcessData = this.dataProcessor.processData.bind(\n      this.dataProcessor\n    );\n    this.module.bpp = this.selected;\n    this.mouseMove = fromEvent(this.canvas?.nativeElement, 'mousemove');\n    this.mouseMove.pipe(throttleTime(200)).subscribe((event: any) => {\n      if (this.mouseHelper != null) {\n        this.mouseHelper.mousemove(event);\n      }\n    });\n  }\n\n  onConnectionStateChange = (redirector: any, state: number): any => {\n    this.deviceState = state;\n    this.deviceStatus.emit(state);\n  };\n\n  onRedirectorError(): void {\n    this.reset();\n  }\n\n  init(): void {\n    this.devicesService\n      .getPowerState(this.deviceId)\n      .pipe(\n        catchError(() => {\n          // this.snackBar.open($localize`Error retrieving power status`, undefined, SnackbarDefaults.defaultError)\n          return of();\n        }),\n        finalize(() => {})\n      )\n      .subscribe((data) => {\n        this.powerState = data;\n        this.isPoweredOn = this.checkPowerStatus();\n        if (!this.isPoweredOn) {\n          this.isLoading = false;\n          // const dialog = this.dialog.open(PowerUpAlertComponent)\n          // dialog.afterClosed().subscribe(result => {\n          //   if (result) {\n          //     this.isLoading = true\n          //     this.devicesService.sendPowerAction(this.deviceId, 2).pipe().subscribe(data => {\n          //       this.instantiate()\n          //       setTimeout(() => {\n          //         this.isLoading = false\n          //         this.autoConnect()\n          //       }, 4000)\n          //     })\n          //   }\n          // })\n        } else {\n          this.instantiate();\n          setTimeout(() => {\n            this.isLoading = false;\n            this.autoConnect()\n          }, 0);\n        }\n      });\n  }\n\n  setAmtFeatures(): void {\n    this.isLoading = true;\n    console.log('coming inside in setAmtfeatures');\n    this.devicesService\n      .setAmtFeatures(this.deviceId)\n      .pipe(\n        catchError(() => {\n          // this.snackBar.open($localize`Error enabling kvm`, undefined, SnackbarDefaults.defaultError)\n          this.init();\n          return of();\n        }),\n        finalize(() => {})\n      )\n      .subscribe(() => this.init());\n  }\n\n  autoConnect (): void {\n    if (this.redirector != null) {\n      this.redirector.start(WebSocket)\n      this.keyboardHelper.GrabKeyInput()\n    }\n  }\n\n  checkPowerStatus(): boolean {\n    return this.powerState.powerstate === 2;\n  }\n\n  reset = (): void => {\n    this.redirector = null;\n    this.module = null;\n    this.dataProcessor = null;\n    this.height = 400;\n    this.width = 400;\n    this.instantiate();\n  };\n\n  stopKvm = (): void => {\n    this.redirector.stop();\n    this.keyboardHelper.UnGrabKeyInput();\n    this.reset();\n  };\n\n  ngDoCheck(): void {\n    if (this.selectedAction !== this.previousAction) {\n      this.previousAction = this.selectedAction;\n    }\n  }\n\n  onMouseup(event: MouseEvent): void {\n    if (this.mouseHelper != null) {\n      this.mouseHelper.mouseup(event);\n    }\n  }\n\n  onMousedown(event: MouseEvent): void {\n    if (this.mouseHelper != null) {\n      this.mouseHelper.mousedown(event);\n    }\n  }\n}\n","<!-- <amt-device-toolbar></amt-device-toolbar> -->\r\n<div>\r\n    <button style=\"display: block;\"> connect </button>\r\n    <canvas class=\"canvas\" #canvas [width]=\"width\" [height]=\"height\" oncontextmenu=\"return false\" (mouseup)=\"onMouseup($event)\" (mousedown)=\"onMousedown($event)\"></canvas>\r\n</div>\r\n\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'amt-device-toolbar',\n  templateUrl: './device-toolbar.component.html',\n  styleUrls: ['./device-toolbar.component.css']\n})\nexport class DeviceToolbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div>Device Control</div>\n<div>List</div>\n<button>tv</button>","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { KvmComponent } from './kvm.component';\nimport { DeviceToolbarComponent } from './app/device-toolbar/device-toolbar.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [KvmComponent, DeviceToolbarComponent],\n  imports: [HttpClientModule, BrowserModule],\n  exports: [KvmComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  providers: [],\n})\nexport class KvmModule {}\n"]}