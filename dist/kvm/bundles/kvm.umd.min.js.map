{"version":3,"sources":["../../../projects/kvm/src/environments/environment.ts","../../../projects/kvm/src/lib/kvm.service.ts","../../../projects/kvm/src/lib/auth.service.ts","../../../projects/kvm/src/lib/kvm.component.ts","../../../projects/kvm/src/lib/kvm.component.html","../../../projects/kvm/src/lib/app/device-toolbar/device-toolbar.component.ts","../../../projects/kvm/src/lib/app/device-toolbar/device-toolbar.component.html","../../../projects/kvm/src/lib/kvm.module.ts"],"names":["environment","production","mpsServer","rpsServer","KvmService","http","this","connectKVMSocket","EventEmitter","stopwebSocket","prototype","setAmtFeatures","deviceId","post","userConsent","enableKVM","enableSOL","enableIDER","pipe","catchError","err","getPowerState","get","sendPowerAction","action","useSOL","payload","method","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn","Injectable","AuthService","loggedInSubject","isLoggedIn","url","localStorage","loggedInUser","next","includes","getLoggedUserToken","loggedUser","getItem","JSON","parse","token","KvmComponent","authService","devicesService","_this","width","height","deviceState","deviceStatus","powerState","btnText","isPoweredOn","isLoading","selected","server","replace","previousAction","selectedAction","mouseMove","encodings","value","viewValue","onConnectionStateChange","redirector","state","emit","reset","module","dataProcessor","instantiate","stopKvm","stop","keyboardHelper","UnGrabKeyInput","ngOnInit","logger","ConsoleLogger","stopSocketSubscription","subscribe","startSocketSubscription","timeInterval","interval","mergeMap","ngAfterViewInit","context","_a","canvas","nativeElement","getContext","AMTKvmDataRedirector","Protocol","KVM","FileReader","AMTDesktop","DataProcessor","mouseHelper","MouseHelper","KeyBoardHelper","onProcessData","processData","bind","onStart","start","onNewState","onStateChange","onSendKvmData","onStateChanged","onError","onRedirectorError","onSend","send","bpp","fromEvent","_b","throttleTime","event","mousemove","init","of","finalize","data","checkPowerStatus","setTimeout","autoConnect","console","log","WebSocket","GrabKeyInput","onEncodingChange","timer","powerstate","ngDoCheck","onMouseup","mouseup","onMousedown","mousedown","ngOnDestroy","unsubscribe","ɵɵdirectiveInject","selectors","viewQuery","rf","ctx","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵlistener","$event","i0.ɵɵadvance","i0.ɵɵproperty","Component","selector","templateUrl","styles","ViewChild","static","Input","Output","DeviceToolbarComponent","decls","vars","template","styleUrls","KvmModule","imports","HttpClientModule","BrowserModule","declarations","exports","NgModule","schemas","CUSTOM_ELEMENTS_SCHEMA","providers"],"mappings":"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","sourcesContent":["export const environment = {\r\n    production: false,\r\n    mpsServer: 'https://localhost/mps',\r\n    rpsServer: 'https://localhost/rps' \r\n}","import { HttpClient } from '@angular/common/http';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\nimport { AmtFeaturesResponse, PowerState } from '../models/models';\n\n@Injectable({\n  providedIn: 'platform',\n})\nexport class KvmService {\n  connectKVMSocket: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n  stopwebSocket: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n  constructor(private readonly http: HttpClient) {}\n\n  setAmtFeatures(deviceId: string): Observable<AmtFeaturesResponse> {\n    const payload = {\n      userConsent: 'none',\n      enableKVM: true,\n      enableSOL: true,\n      enableIDER: true,\n    };\n    return this.http\n      .post<AmtFeaturesResponse>(\n        `${environment.mpsServer}/api/v1/amt/features/${deviceId}`,\n        payload\n      )\n      .pipe(\n        catchError((err) => {\n          throw err;\n        })\n      );\n  }\n  getPowerState(deviceId: string): Observable<PowerState> {\n    return this.http\n      .get<PowerState>(\n        `${environment.mpsServer}/api/v1/amt/power/state/${deviceId}`\n      )\n      .pipe(\n        catchError((err) => {\n          throw err;\n        })\n      );\n  }\n  sendPowerAction(\n    deviceId: string,\n    action: number,\n    useSOL: boolean = false\n  ): Observable<any> {\n    const payload = {\n      method: 'PowerAction',\n      action,\n      useSOL,\n    };\n    return this.http\n      .post<any>(\n        `${environment.mpsServer}/api/v1/amt/power/action/${deviceId}`,\n        payload\n      )\n      .pipe(\n        catchError((err) => {\n          throw err;\n        })\n      );\n  }\n}\n","import { HttpClient } from '@angular/common/http';\r\nimport { EventEmitter, Injectable } from '@angular/core';\r\nimport { environment } from '../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'platform',\r\n})\r\nexport class AuthService {\r\n  loggedInSubject: EventEmitter<boolean> = new EventEmitter<boolean>(false);\r\n  isLoggedIn = false;\r\n  url: string = `${environment.mpsServer}/api/v1/authorize`;\r\n\r\n  constructor(private readonly http: HttpClient) {\r\n    if (localStorage.loggedInUser != null) {\r\n      this.isLoggedIn = true;\r\n      this.loggedInSubject.next(this.isLoggedIn);\r\n    }\r\n    if (environment.mpsServer.includes('/mps')) {\r\n      // handles kong route\r\n      this.url = `${environment.mpsServer}/login/api/v1/authorize`;\r\n    }\r\n  }\r\n\r\n  getLoggedUserToken(): string {\r\n    const loggedUser: any = localStorage.getItem('loggedInUser');\r\n    const token: string = JSON.parse(loggedUser).token;\r\n    return token;\r\n  }\r\n}\r\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport {\n  AMTDesktop,\n  AMTKvmDataRedirector,\n  ConsoleLogger,\n  DataProcessor,\n  IDataProcessor,\n  ILogger,\n  KeyBoardHelper,\n  MouseHelper,\n  Protocol,\n} from '@open-amt-cloud-toolkit/ui-toolkit/core';\nimport { environment } from '../environments/environment';\n// import { ActivatedRoute } from '@angular/router';\nimport { KvmService } from './kvm.service';\nimport { fromEvent, interval, of, Subscription, timer } from 'rxjs';\nimport { catchError, finalize, mergeMap, throttleTime } from 'rxjs/operators';\n// import { MatDialog } from '@angular/material/dialog';\n// import { MatSnackBar } from '@angular/material/snack-bar';\n// import { PowerUpAlertComponent } from './shared/power-up-alert/power-up-alert.component';\n// import SnackbarDefaults from './shared/config/snackBarDefault';\nimport { AuthService } from './auth.service'\n// import { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'amt-kvm',\n  templateUrl: './kvm.component.html',\n  styles: [],\n})\nexport class KvmComponent implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChild('canvas', { static: false }) canvas: ElementRef | undefined;\n  public context!: CanvasRenderingContext2D;\n\n  // //setting a width and height for the canvas\n\n  @Input() public width = 400;\n  @Input() public height = 400;\n  @Output() deviceState: number = 0;\n  @Output() deviceStatus: EventEmitter<number> = new EventEmitter<number>();\n  stopSocketSubscription!: Subscription;\n  startSocketSubscription!: Subscription;\n  module: any;\n  redirector: any;\n  dataProcessor!: IDataProcessor | null;\n  mouseHelper!: MouseHelper;\n  keyboardHelper!: KeyBoardHelper;\n  logger!: ILogger;\n  powerState: any = 0;\n  btnText: string = 'Disconnect';\n  isPoweredOn: boolean = false;\n  isLoading: boolean = false;\n  deviceId: string = '';\n  selected: number = 1;\n  timeInterval!: any;\n  server: string = `${environment.mpsServer.replace('http', 'ws')}/relay`;\n  previousAction = 'kvm';\n  selectedAction = '';\n  mouseMove: any = null;\n\n  encodings = [\n    { value: 1, viewValue: 'RLE 8' },\n    { value: 2, viewValue: 'RLE 16' },\n  ];\n\n  constructor(\n    // public snackBar: MatSnackBar,\n    // public dialog: MatDialog,\n    private readonly authService: AuthService,\n    private readonly devicesService: KvmService,\n    // public readonly activatedRoute: ActivatedRoute\n  ) {\n    if (environment.mpsServer.includes('/mps')) {\n      //handles kong route\n      this.server = `${environment.mpsServer.replace('http', 'ws')}/ws/relay`;\n    }\n  }\n\n  ngOnInit(): void {\n    this.logger = new ConsoleLogger(1);\n    // this.activatedRoute.params.subscribe((params) => {\n    //   this.isLoading = true;\n    //   this.deviceId = params.id;\n    // });\n    this.stopSocketSubscription = this.devicesService.stopwebSocket.subscribe(\n      () => {\n        this.stopKvm();\n      }\n    );\n    this.startSocketSubscription =\n      this.devicesService.connectKVMSocket.subscribe(() => {\n        this.setAmtFeatures();\n      });\n    this.timeInterval = interval(15000)\n      .pipe(mergeMap(() => this.devicesService.getPowerState(this.deviceId)))\n      .subscribe();\n  }\n\n  ngAfterViewInit(): void {\n    this.setAmtFeatures();\n  }\n\n  instantiate(): void {\n    this.context = this.canvas?.nativeElement.getContext('2d');\n    this.redirector = new AMTKvmDataRedirector(\n      this.logger,\n      Protocol.KVM,\n      new FileReader(),\n      this.deviceId,\n      16994,\n      '',\n      '',\n      0,\n      0,\n      this.authService.getLoggedUserToken(),\n      this.server\n    );\n    this.module = new AMTDesktop(this.logger as any, this.context);\n    this.dataProcessor = new DataProcessor(\n      this.logger,\n      this.redirector,\n      this.module\n    );\n    this.mouseHelper = new MouseHelper(this.module, this.redirector, 200);\n    this.keyboardHelper = new KeyBoardHelper(this.module, this.redirector);\n\n    this.redirector.onProcessData = this.module.processData.bind(this.module);\n    this.redirector.onStart = this.module.start.bind(this.module);\n    this.redirector.onNewState = this.module.onStateChange.bind(this.module);\n    this.redirector.onSendKvmData = this.module.onSendKvmData.bind(this.module);\n    this.redirector.onStateChanged = this.onConnectionStateChange.bind(this);\n    this.redirector.onError = this.onRedirectorError.bind(this);\n    this.module.onSend = this.redirector.send.bind(this.redirector);\n    this.module.onProcessData = this.dataProcessor.processData.bind(\n      this.dataProcessor\n    );\n    this.module.bpp = this.selected;\n    this.mouseMove = fromEvent(this.canvas?.nativeElement, 'mousemove');\n    this.mouseMove.pipe(throttleTime(200)).subscribe((event: any) => {\n      if (this.mouseHelper != null) {\n        this.mouseHelper.mousemove(event);\n      }\n    });\n  }\n\n  onConnectionStateChange = (redirector: any, state: number): any => {\n    this.deviceState = state;\n    this.deviceStatus.emit(state);\n  };\n\n  onRedirectorError(): void {\n    this.reset();\n  }\n\n  init(): void {\n    this.devicesService\n      .getPowerState(this.deviceId)\n      .pipe(\n        catchError(() => {\n          // this.snackBar.open(`Error retrieving power status`, undefined, SnackbarDefaults.defaultError)\n          return of();\n        }),\n        finalize(() => {})\n      )\n      .subscribe((data) => {\n        this.powerState = data;\n        this.isPoweredOn = this.checkPowerStatus();\n        if (!this.isPoweredOn) {\n          this.isLoading = false;\n          // const dialog = this.dialog.open(PowerUpAlertComponent);\n          // dialog.afterClosed().subscribe((result) => {\n          //   if (result) {\n          //     this.isLoading = true;\n          //     this.devicesService\n          //       .sendPowerAction(this.deviceId, 2)\n          //       .pipe()\n          //       .subscribe((data) => {\n          //         this.instantiate();\n          //         setTimeout(() => {\n          //           this.isLoading = false;\n          //           this.autoConnect();\n          //         }, 4000);\n          //       });\n          //   }\n          // });\n        } else {\n          this.instantiate();\n          setTimeout(() => {\n            this.isLoading = false;\n            this.autoConnect();\n          }, 0);\n        }\n      });\n  }\n\n  setAmtFeatures(): void {\n    this.isLoading = true;\n    console.log('coming inside in setAmtfeatures');\n    this.devicesService\n      .setAmtFeatures(this.deviceId)\n      .pipe(\n        catchError(() => {\n          // this.snackBar.open(`Error enabling kvm`, undefined, SnackbarDefaults.defaultError)\n          this.init();\n          return of();\n        }),\n        finalize(() => {})\n      )\n      .subscribe(() => this.init());\n  }\n\n  autoConnect(): void {\n    if (this.redirector != null) {\n      this.redirector.start(WebSocket);\n      this.keyboardHelper.GrabKeyInput();\n    }\n  }\n\n  \n  onEncodingChange (): void {\n    this.stopKvm()\n    timer(1000).subscribe(() => {\n      this.autoConnect()\n    })\n  }\n\n  checkPowerStatus(): boolean {\n    return this.powerState.powerstate === 2;\n  }\n\n  reset = (): void => {\n    this.redirector = null;\n    this.module = null;\n    this.dataProcessor = null;\n    this.height = 400;\n    this.width = 400;\n    this.instantiate();\n  };\n\n  stopKvm = (): void => {\n    this.redirector.stop();\n    this.keyboardHelper.UnGrabKeyInput();\n    this.reset();\n  };\n\n  ngDoCheck(): void {\n    if (this.selectedAction !== this.previousAction) {\n      this.previousAction = this.selectedAction;\n    }\n  }\n\n  onMouseup(event: MouseEvent): void {\n    if (this.mouseHelper != null) {\n      this.mouseHelper.mouseup(event);\n    }\n  }\n\n  onMousedown(event: MouseEvent): void {\n    if (this.mouseHelper != null) {\n      this.mouseHelper.mousedown(event);\n    }\n  }\n\n  ngOnDestroy (): void {\n    if (this.timeInterval) {\n      this.timeInterval.unsubscribe()\n    }\n    this.stopKvm()\n    if (this.startSocketSubscription) {\n      this.startSocketSubscription.unsubscribe()\n    }\n    if (this.stopSocketSubscription) {\n      this.stopSocketSubscription.unsubscribe()\n    }\n  }\n}\n","<!-- <amt-device-toolbar></amt-device-toolbar> -->\r\n<div>\r\n    <button style=\"display: block;\"> connect </button>\r\n    <canvas class=\"canvas\" #canvas [width]=\"width\" [height]=\"height\" oncontextmenu=\"return false\" (mouseup)=\"onMouseup($event)\" (mousedown)=\"onMousedown($event)\"></canvas>\r\n</div>\r\n\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'amt-device-toolbar',\n  templateUrl: './device-toolbar.component.html',\n  styleUrls: ['./device-toolbar.component.css']\n})\nexport class DeviceToolbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div>Device Control</div>\n<div>List</div>\n<button>tv</button>","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { KvmComponent } from './kvm.component';\nimport { DeviceToolbarComponent } from './app/device-toolbar/device-toolbar.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AuthService } from './auth.service';\nimport { KvmService } from './kvm.service';\n\n@NgModule({\n  declarations: [KvmComponent, DeviceToolbarComponent],\n  imports: [HttpClientModule, BrowserModule],\n  exports: [KvmComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  providers: [AuthService, KvmService],\n})\nexport class KvmModule {}\n"]}